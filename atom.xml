<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迁乔的博客</title>
  
  
  <link href="https://alexuhui.github.io/atom.xml" rel="self"/>
  
  <link href="https://alexuhui.github.io/"/>
  <updated>2022-12-19T15:07:39.969Z</updated>
  <id>https://alexuhui.github.io/</id>
  
  <author>
    <name>迁乔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>强制重建UGUI布局</title>
    <link href="https://alexuhui.github.io/2022/12/19/ugui-layout-force-rebuild/"/>
    <id>https://alexuhui.github.io/2022/12/19/ugui-layout-force-rebuild/</id>
    <published>2022-12-19T14:12:28.000Z</published>
    <updated>2022-12-19T15:07:39.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是重建"><a href="#1-什么是重建" class="headerlink" title="1.什么是重建"></a>1.什么是重建</h3><hr><p>重建就是ui元素发生改变后，重新构建UI网格。UGUI的布局组件在内容发生改变后，调用<code>SetDirty()</code>，通过<code>LayoutRebuilder</code>类的静态方法<code>MarkLayoutForRebuild(RectTransform rect)</code>，标记需要重建的<code>RectTransform</code>。标记对象最终会保存在<code>CanvasUpdateRegistry</code>的重建队列<code>m_LayoutRebuildQueue</code>里，并在<code>PerformUpdate（）</code>函数里完成重建。</p><h3 id="2-为什么要强制重建"><a href="#2-为什么要强制重建" class="headerlink" title="2.为什么要强制重建"></a>2.为什么要强制重建</h3><hr><p>有的时候，自己的逻辑里面可能会需要使用ui的大小或者位置数据去手动计算UI布局，这个时候，就有可能由于UGUI布局刷新不及时，导致我们拿到的实际上是刷新之前的数据，从而导致错误。比如，自己实现的虚拟列表，需要根据列表的每个Item的Size计算Item的坐标。如果每个item的大小不一样，而且大小根据item要显示的内容动态改变。这个时候，如果不能保证自己的计算逻辑在系统重建之后进行，就拿错误的参数进行计算从而导致异常。</p><h3 id="3-怎么强制重建"><a href="#3-怎么强制重建" class="headerlink" title="3.怎么强制重建"></a>3.怎么强制重建</h3><hr><p>调用<code>LayoutRebuilder</code>类的静态方法<code>ForceRebuildLayoutImmediate(RectTransform layoutRoot)</code>即可！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是重建&quot;&gt;&lt;a href=&quot;#1-什么是重建&quot; class=&quot;headerlink&quot; title=&quot;1.什么是重建&quot;&gt;&lt;/a&gt;1.什么是重建&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;重建就是ui元素发生改变后，重新构建UI网格。UGUI的布局组件在内容发生改变后，调用&lt;c</summary>
      
    
    
    
    <category term="Unity" scheme="https://alexuhui.github.io/categories/Unity/"/>
    
    <category term="小贴士" scheme="https://alexuhui.github.io/categories/Unity/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    <category term="UGUI" scheme="https://alexuhui.github.io/categories/Unity/%E5%B0%8F%E8%B4%B4%E5%A3%AB/UGUI/"/>
    
    
    <category term="Unity" scheme="https://alexuhui.github.io/tags/Unity/"/>
    
    <category term="tips" scheme="https://alexuhui.github.io/tags/tips/"/>
    
    <category term="小贴士" scheme="https://alexuhui.github.io/tags/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    <category term="UGUI" scheme="https://alexuhui.github.io/tags/UGUI/"/>
    
  </entry>
  
  <entry>
    <title>shader中使用_Time做动效时需要小心精度问题</title>
    <link href="https://alexuhui.github.io/2022/12/03/shader%E4%B8%AD%E4%BD%BF%E7%94%A8-Time%E5%81%9A%E5%8A%A8%E6%95%88%E6%97%B6%E9%9C%80%E8%A6%81%E5%B0%8F%E5%BF%83%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://alexuhui.github.io/2022/12/03/shader%E4%B8%AD%E4%BD%BF%E7%94%A8-Time%E5%81%9A%E5%8A%A8%E6%95%88%E6%97%B6%E9%9C%80%E8%A6%81%E5%B0%8F%E5%BF%83%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-03T14:20:16.000Z</published>
    <updated>2022-12-19T14:14:02.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-关于Unity-Shader中时间相关的相关变量"><a href="#1-关于Unity-Shader中时间相关的相关变量" class="headerlink" title="1.关于Unity Shader中时间相关的相关变量"></a>1.关于Unity Shader中时间相关的相关变量</h3><hr><h4 id="1-Unity中设置了4个时间相关的变量"><a href="#1-Unity中设置了4个时间相关的变量" class="headerlink" title="1.Unity中设置了4个时间相关的变量"></a>1.Unity中设置了4个时间相关的变量</h4><p><img src="/2022/12/03/shader%E4%B8%AD%E4%BD%BF%E7%94%A8-Time%E5%81%9A%E5%8A%A8%E6%95%88%E6%97%B6%E9%9C%80%E8%A6%81%E5%B0%8F%E5%BF%83%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/unity_time.png" alt="图1：shader中可用的时间变量"><br><br>注意：这里的t,是指场景（Scene）加载以来的时间，那么在场景加载时间比较长之后，就可能出现浮点精度不足的情况。</p><h4 id="2-关于基于时间变化实现的动效卡顿的问题"><a href="#2-关于基于时间变化实现的动效卡顿的问题" class="headerlink" title="2.关于基于时间变化实现的动效卡顿的问题"></a>2.关于基于时间变化实现的动效卡顿的问题</h4><p>基于时间_Time在shader实现的动效，可能运行时间久了，会出现画面一卡一顿的问题。大部分情况下，是因为时间精度不够用了。而这种情况，经常是在PC上难以复现，在手机（特别是低端手机）上容易出现。从经验上说，_Time.x 比 _Time.y “精度更高”。这里说精度更高可能不太准确，但我不知道用什么术语来描述。举个例子，假设现在只用4位（xxxx）来表示一个数，那么，如果是用t来填充，填充到1000秒的时候，小数位就没了，只能一秒一秒的递增了，但是，如果用t&#x2F;20来填充，那么可以到20000（20000&#x2F;20&#x3D;1000）秒的时候，小数位才表达不了。由于小数位越多的时候，动效看上去才会越顺畅。所以如果shader中用的是_Time.y 或者_Time.z甚至是Time.w做的动效，在手机上出现游戏运行一段时间，动效看起来卡顿，但游戏画面本身不怎么掉帧，试试改_Time.x，可能会出现奇迹~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-关于Unity-Shader中时间相关的相关变量&quot;&gt;&lt;a href=&quot;#1-关于Unity-Shader中时间相关的相关变量&quot; class=&quot;headerlink&quot; title=&quot;1.关于Unity Shader中时间相关的相关变量&quot;&gt;&lt;/a&gt;1.关于Unit</summary>
      
    
    
    
    <category term="Unity" scheme="https://alexuhui.github.io/categories/Unity/"/>
    
    <category term="小贴士" scheme="https://alexuhui.github.io/categories/Unity/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="Unity" scheme="https://alexuhui.github.io/tags/Unity/"/>
    
    <category term="tips" scheme="https://alexuhui.github.io/tags/tips/"/>
    
    <category term="小贴士" scheme="https://alexuhui.github.io/tags/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    <category term="shader" scheme="https://alexuhui.github.io/tags/shader/"/>
    
    <category term="_Time" scheme="https://alexuhui.github.io/tags/Time/"/>
    
  </entry>
  
  <entry>
    <title>谨慎使用EditorPrefs.DeleteAll()</title>
    <link href="https://alexuhui.github.io/2022/10/27/unity-tips-editorprefs-deleteall/"/>
    <id>https://alexuhui.github.io/2022/10/27/unity-tips-editorprefs-deleteall/</id>
    <published>2022-10-27T15:50:56.000Z</published>
    <updated>2022-10-29T14:43:09.757Z</updated>
    
    <content type="html"><![CDATA[<p>在使用EditorPrefs相关API时需要谨慎，特别是<code>EditorPrefs.DeleteAll()</code><br><br>因为Unity编辑器的本地配置信息就保存在<code>EditorPrefs</code>里<br><br>在不知情的情况下调用了<code>EditorPrefs.DeleteAll()</code>API，可能会出现一些意想不到的问题。<br><br>比如：<br><br>C#不自动编译了！<br><br>自宝义的SDK路径丢失了！<br></p><p>总之，有点抓狂！<br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用EditorPrefs相关API时需要谨慎，特别是&lt;code&gt;EditorPrefs.DeleteAll()&lt;/code&gt;&lt;br&gt;&lt;br&gt;因为Unity编辑器的本地配置信息就保存在&lt;code&gt;EditorPrefs&lt;/code&gt;里&lt;br&gt;&lt;br&gt;在不知情的情况下调用了</summary>
      
    
    
    
    <category term="Unity" scheme="https://alexuhui.github.io/categories/Unity/"/>
    
    <category term="小贴士" scheme="https://alexuhui.github.io/categories/Unity/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
    
    <category term="Unity" scheme="https://alexuhui.github.io/tags/Unity/"/>
    
    <category term="tips" scheme="https://alexuhui.github.io/tags/tips/"/>
    
    <category term="小贴士" scheme="https://alexuhui.github.io/tags/%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    
  </entry>
  
  <entry>
    <title>判断圆与矩形相交</title>
    <link href="https://alexuhui.github.io/2022/09/25/math-rect-circle-intersect/"/>
    <id>https://alexuhui.github.io/2022/09/25/math-rect-circle-intersect/</id>
    <published>2022-09-25T09:50:35.000Z</published>
    <updated>2022-10-29T14:43:05.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-边和坐标轴平行的矩形和圆相交的情况"><a href="#1-边和坐标轴平行的矩形和圆相交的情况" class="headerlink" title="1.边和坐标轴平行的矩形和圆相交的情况"></a>1.边和坐标轴平行的矩形和圆相交的情况</h3><h4 id="方法1：通过找到相交和相离的边界条件。再推广到一般情况。"><a href="#方法1：通过找到相交和相离的边界条件。再推广到一般情况。" class="headerlink" title="方法1：通过找到相交和相离的边界条件。再推广到一般情况。"></a>方法1：通过找到相交和相离的边界条件。再推广到一般情况。<br></h4><p>这种方法很直觉，很好理解。如下图1：<br><br><img src="/2022/09/25/math-rect-circle-intersect/CircleRectInsert.webp" alt="图1：圆与矩形关系边界条件"> <br><br>想象一下，有个圆圆的轮子绕着矩形滚一圈，圆心的坐标，是不是就是边界条件？<br><br>那么，假设矩形中心在坐标原点的情况下，<br><br>1、当圆在拐角时的边界： <code>|BG| = r</code>  即  <code>x^2 + y^2 = r^2</code>  那么要相交也就是   <code>x^2 + y^2 &lt; r^2</code> <br><br>拐角必然是离圆心最近的顶点，分别找出离圆心最近的x,y值，即可根据<code>x^2 + y^2 &lt; r^2</code>判断。 <br><br>2、当圆在矩形上方时： <code>|EF| = r</code> 即  <code>y - halfH = r</code>  那么相交就是 <code>y &lt; r + halfH</code> ;  <br><br>显然，当圆在矩形下方时， <code>-y &lt; r + halfH</code>; <br><br>另外，圆在矩形上方&#x2F;下方的充要条件是 <code>- halfW &lt; x &lt; halfW</code> 即  <code>|x| &lt; halfW</code> <br><br>3、当圆在在两侧时，和上下思路一样。<br><br>综上，<br><br>假设矩形中心点rectPos，长宽的一半halfSize，圆心circlePos，半径radius: <br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CS"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CheckCircleRectInsert1</span>(<span class="hljs-params">Vector2 rectPos, Vector2 halfSize, Vector2 circlePos, <span class="hljs-built_in">float</span> radius</span>)</span><br>&#123;<br>    <span class="hljs-comment">//条件1 拐角</span><br>    <span class="hljs-built_in">float</span> minx, miny;<br>    <span class="hljs-comment">//找出离圆心最近的顶点的x值</span><br>    minx = Mathf.Min(Mathf.Abs(rectPos.x + halfSize.x - circlePos.x), Mathf.Abs(rectPos.x - halfSize.x - circlePos.x));<br>    <span class="hljs-comment">//找出离圆心最近的顶点的y值</span><br>    miny = Mathf.Min(Mathf.Abs(rectPos.y + halfSize.y - circlePos.y), Mathf.Abs(rectPos.y - halfSize.y - circlePos.y));<br>    <span class="hljs-keyword">if</span> (minx * minx + miny * miny &lt;= radius * radius) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">//条件2 外边  </span><br>    <span class="hljs-built_in">float</span> lenx = Mathf.Abs(rectPos.x - circlePos.x);<br>    <span class="hljs-built_in">float</span> leny = Mathf.Abs(rectPos.y - circlePos.y);<br>    <span class="hljs-keyword">if</span> (lenx &lt; halfSize.x + radius &amp;&amp; leny &lt; halfSize.y)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (leny &lt; halfSize.y + radius &amp;&amp; lenx &lt; halfSize.x)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：<br></h4><p>这种方法比较抽象，可参考<a href="https://www.zhihu.com/question/24251545">知乎答案</a> <br><br>这个方法巧妙地运用了矩形的对称性质。<br><br>其实，如果理解了第一种方法，方法2也就不难理解了。想象一下，类似折纸，由于矩形的对称性，可以把任意位置的圆对称到矩形的右上方（当然，也可能是正上方，正右方，或者中心）。而这个处理过程也很简单，算出矩形中心指向圆心的向量<code>v</code>，只要对<code>x</code>, <code>y</code>取绝对值即可。<br><br>如下图2：<br><br><img src="/2022/09/25/math-rect-circle-intersect/CircleRectInsert2.webp" alt="图2：圆与矩形关系的向量表示"><br><br>本质上，该方法，也是分三种情况来理解：<br><br>1、当圆在拐角时，向量<code>v - h</code>得到的向量<code>u</code>的模就是顶点到圆心的距离，所以，<code>|u| &lt; r</code>即是相交 <br><br>2、当圆在矩形上方\下方时，边界值也是矩形的宽的一半加上圆的半径。这里可以忽略<code>u</code>的<code>x</code>，那么<code>|u|</code>就是圆心到矩形边的距离了，所以，<code>|u| &lt; r</code>即是相交 <br><br>3、当圆在在两侧时，和上下思路一样。<br><br>综上，方法运用向量把各种情况统一了起来：<br><br>假设矩形中心点rectPos，长宽的一半halfSize，圆心circlePos，半径radius: <br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CS"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CheckCircleRectInsert2</span>(<span class="hljs-params">Vector2 rectPos, Vector2 halfSize, Vector2 circlePos, <span class="hljs-built_in">float</span> radius</span>)</span><br> &#123;<br>     <span class="hljs-comment">// 第1步：转换至第1象限</span><br>     Vector2 v = <span class="hljs-keyword">new</span> Vector2(Mathf.Abs(rectPos.x - circlePos.x), Mathf.Abs(rectPos.y - circlePos.y));<br>     <span class="hljs-comment">//第2步：求圆心至矩形的最短距离矢量</span><br>     Vector2 u = Vector2.Max(v - halfSize, Vector2.zero);<br>     <span class="hljs-comment">// 第3步：长度平方与半径平方比较</span><br>     <span class="hljs-keyword">return</span> Vector2.Dot(u, u) &lt;= radius * radius;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="2-边和坐标轴不平行的矩形和圆相交的情况"><a href="#2-边和坐标轴不平行的矩形和圆相交的情况" class="headerlink" title="2.边和坐标轴不平行的矩形和圆相交的情况"></a>2.边和坐标轴不平行的矩形和圆相交的情况</h3><p>接下来，看看当矩形可能发生旋转的情况。<br><br>当矩形发生旋转后，一种很自然的想法就是：<br><br>把圆心变换到矩形的局部空间（以矩形中心为原点，坐标轴平行于矩形的边）。<br><br>这样，接着用上面的方法判断就好了。<br><br>变换矩阵的构造就简单上个图，如图3：<br><br>截图来自闫令琪大神的课件：<br><a href="https://www.bilibili.com/video/BV1X7411F744?p=3&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=9ac312e492d54319bc438327ffb04b0c">GAMES101 现代计算机图形学入门</a>  <br><br><img src="/2022/09/25/math-rect-circle-intersect/20220917164345.webp" alt="图3：二维空间中的旋转矩阵">  <br></p><figure class="highlight plaintext"><figcaption><span>static Matrix3x3 Get2DTRMatrix(Vector2 pos, float rot)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs public">&#123;<br>    var cos = Mathf.Cos(Mathf.Deg2Rad * rot);<br>    var sin = Mathf.Sin(Mathf.Deg2Rad * rot);<br>// 按行构建位移旋转变换矩阵（这里忽略了缩放）<br>    var row0 = new Vector3(cos, -sin, pos.x);<br>    var row1 = new Vector3(sin, cos, pos.y);<br>    var row2 = new Vector3(0, 0, 1);<br>    Matrix3x3 matrix = Matrix3x3.CreateFromRows(row0, row1, row2).Inverse();<br>    return matrix;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TODO  为什么要求逆才对呢？</code><br></p><p>假设矩形中心点rectPos，长宽的一半halfSize，旋转角度为radius，圆心circlePos，半径radius<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CS"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CheckCircleRectRotInsert</span>(<span class="hljs-params">Vector2 rectPos,  Vector2 halfSize, <span class="hljs-built_in">float</span> rectRot, Vector2 circlePos, <span class="hljs-built_in">float</span> radius</span>)</span><br>&#123;<br>    <span class="hljs-comment">//按行排列3x3矩阵</span><br>    <span class="hljs-keyword">var</span> mat3x3 = Get2DTRMatrix(rectPos, rectRot);<br>    <span class="hljs-comment">// ----------------</span><br>    <span class="hljs-comment">// [row0]            </span><br>    <span class="hljs-comment">// [row1]    点乘    [circlePos, 1] （转置）</span><br>    <span class="hljs-comment">// [0,0,1]</span><br>    <span class="hljs-built_in">float</span> x = mat3x3.V00 * circlePos.x + mat3x3.V01 * circlePos.y + mat3x3.V02;<br>    <span class="hljs-built_in">float</span> y = mat3x3.V10 * circlePos.x + mat3x3.V11 * circlePos.y + mat3x3.V12;<br>    Vector2 circleLocalPos = <span class="hljs-keyword">new</span> Vector2(x,y);<br><br>    <span class="hljs-comment">// 注意这里转到了矩形本地坐标，那矩形中心点就是(0,0)了</span><br>    <span class="hljs-keyword">return</span> CheckCircleRectInsert1(Vector2.zero, halfSize, circleLocalPos, radius);<br>    <span class="hljs-comment">//return CheckCircleRectInsert2(Vector2.zero, halfSize, circleLocalPos, radius);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而对于方法2，还有另一种方法。<br><br>因为向量有和位置无关的天然优势，所以只考虑旋转就好了。既然矩形旋转了，就想办法把它旋回去，也就是反向旋转相同的角度。把矩形中心指向圆心的向量也跟着旋转，就转换成了未旋转时的情况。如下图4：<br><br><img src="/2022/09/25/math-rect-circle-intersect/CircleRectInsertRot.webp" alt="图4：矩形指向圆心的向量伴随矩形一起旋转"><br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs CS"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CheckCircleRectRotInsert2</span>(<span class="hljs-params">Vector2 rectPos, Vector2 halfSize, <span class="hljs-built_in">float</span> rectRot, Vector2 circlePos, <span class="hljs-built_in">float</span> radius</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> dir = circlePos - rectPos;<br>    dir = Quaternion.AngleAxis(-rectRot, Vector3.forward) * dir;<br>    <span class="hljs-keyword">var</span> v = Vector2.Max(dir, -dir);<br>    <span class="hljs-keyword">var</span> u = Vector2.Max(v - halfSize, Vector3.zero);<br>    <span class="hljs-keyword">return</span> Vector2.Dot(u, u) &lt;= radius * radius;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：旋转的时候，分清是基于哪条轴做旋转。拎不清的话，很容易懵逼。<br><br>Unity使用的世界是左手坐标系，如下图5：<br><br>在绕Z轴旋转时，是逆时针的，而绕X、Y轴旋转时是顺时针的。<br><br><img src="/2022/09/25/math-rect-circle-intersect/left-half_coordinate_system.webp" alt="图5：左手系的旋转"><br></p><p><a href="https://github.com/alexuhui/algorithm">相关工程github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-边和坐标轴平行的矩形和圆相交的情况&quot;&gt;&lt;a href=&quot;#1-边和坐标轴平行的矩形和圆相交的情况&quot; class=&quot;headerlink&quot; title=&quot;1.边和坐标轴平行的矩形和圆相交的情况&quot;&gt;&lt;/a&gt;1.边和坐标轴平行的矩形和圆相交的情况&lt;/h3&gt;&lt;h4 i</summary>
      
    
    
    
    <category term="数学" scheme="https://alexuhui.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="几何" scheme="https://alexuhui.github.io/categories/%E6%95%B0%E5%AD%A6/%E5%87%A0%E4%BD%95/"/>
    
    
    <category term="数学" scheme="https://alexuhui.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="几何" scheme="https://alexuhui.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
    <category term="矩形" scheme="https://alexuhui.github.io/tags/%E7%9F%A9%E5%BD%A2/"/>
    
    <category term="圆" scheme="https://alexuhui.github.io/tags/%E5%9C%86/"/>
    
    <category term="相交" scheme="https://alexuhui.github.io/tags/%E7%9B%B8%E4%BA%A4/"/>
    
  </entry>
  
</feed>
